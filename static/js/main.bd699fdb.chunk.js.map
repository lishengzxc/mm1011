{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Main","imagelist","src","autoPlay","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAKqBA,G,wLAiBjB,OAAO,6BACL,kBAAC,IAAD,CAAWC,UAfK,CAChB,qEACA,iPACA,sOACA,mNACA,kOACA,iRACA,iNACA,4OACA,4OACA,kNACA,oNACA,yEAIA,2BAAOC,IAAI,gIAAgIC,UAAQ,S,GAnBvHC,cCOdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bd699fdb.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport ImageView from 'react-imageview'\n\nimport 'react-imageview/dist/react-imageview.min.css'\n\nexport default class Main extends Component {\n\n  render() {\n    const imagelist = [\n      'https://gw.alicdn.com/tfs/TB1y3KdiO_1gK0jSZFqXXcpaXXa-720-1280.png',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778718966&di=87ad69093e250ad3acf9131f20d22d5a&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F17%2F02%2F19%2F7a39d3bf1f13c92e30874404c0908eb2.jpg',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778718965&di=3881de610ffce803a0b9dbfce4b342e4&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F518621e1fbd047a00cedb02efec97e0250358b5a2210e9-zpP4th_fw658',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778718964&di=ce45a4fa5fbdb3bf9ebfae7a45f5d91a&imgtype=0&src=http%3A%2F%2Fp2.ssl.cdn.btime.com%2Ft01c8d121515585351a.jpg%3Fsize%3D640x524',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778718964&di=b5c49017a0a15d0536f2b4d6ffbf08b8&imgtype=0&src=http%3A%2F%2Ftva2.sinaimg.cn%2Fcrop.0.0.535.535.1024%2F006bp2rHjw1f0me0cdh4sj30ex0go41r.jpg',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778718963&di=24b99a1a7dc492ab36f7cbf4eebf9f34&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%253D580%2Fsign%3D7133ddf5d2a20cf44690fed746084b0c%2F0431d7dda144ad347133ddf5d2a20cf430ad85c2.jpg',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778718963&di=28c87468dd7fb0e90b19dcb83c9afdfa&imgtype=0&src=http%3A%2F%2Fwx4.sinaimg.cn%2Flarge%2Fb60d4a83gy1fegttg1alwj20qo0zkdqq.jpg',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778718963&di=1a18acc168f902e010d18f2433c249d5&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201610%2F26%2F20161026132522_rHmjc.thumb.224_0.jpeg',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778718961&di=7b876c450f8a3ba1ebc8f0372aba0c11&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201707%2F31%2F20170731103048_zaeTw.thumb.700_0.jpeg',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778813381&di=7dd429d671e12439e89dc2c789ac6b9c&imgtype=0&src=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F031b1995b0e1119a8012043d85871f4.jpg',\n      'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1570778813379&di=c7d8f5137342fb78650c8f1f3247c07b&imgtype=0&src=http%3A%2F%2Fi1.img.969g.com%2Ffs%2Fimgx2011%2F10%2F19%2F115_155909_9caa7.jpg',\n      'https://gw.alicdn.com/tfs/TB1ptOaiFT7gK0jSZFpXXaTkpXa-1215-2160.png',\n    ]\n    return <div>\n      <ImageView imagelist={imagelist} />\n      <audio src=\"https://lishengdefile.oss-cn-shanghai.aliyuncs.com/%E6%9D%8E%E9%9B%AA%E8%8E%B1%20-%20%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90.mp3\" autoPlay />\n    </div>\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}